// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from 'flatbuffers';
/**
 * @constructor
 */
export namespace WPFlatbuffers {
  export class Vector3 {
    bb: flatbuffers.ByteBuffer | null = null;

    bb_pos: number = 0;
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Vector3
     */
    __init(i: number, bb: flatbuffers.ByteBuffer): Vector3 {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    }

    /**
     * @returns number
     */
    x(): number {
      return this.bb!.readFloat32(this.bb_pos);
    }

    /**
     * @returns number
     */
    y(): number {
      return this.bb!.readFloat32(this.bb_pos + 4);
    }

    /**
     * @returns number
     */
    z(): number {
      return this.bb!.readFloat32(this.bb_pos + 8);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param number x
     * @param number y
     * @param number z
     * @returns flatbuffers.Offset
     */
    static createVector3(
      builder: flatbuffers.Builder,
      x: number,
      y: number,
      z: number
    ): flatbuffers.Offset {
      builder.prep(4, 12);
      builder.writeFloat32(z);
      builder.writeFloat32(y);
      builder.writeFloat32(x);
      return builder.offset();
    }
  }
}
/**
 * @constructor
 */
export namespace WPFlatbuffers {
  export class Float {
    bb: flatbuffers.ByteBuffer | null = null;

    bb_pos: number = 0;
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Float
     */
    __init(i: number, bb: flatbuffers.ByteBuffer): Float {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    }

    /**
     * @returns number
     */
    value(): number {
      return this.bb!.readFloat32(this.bb_pos);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param number value
     * @returns flatbuffers.Offset
     */
    static createFloat(
      builder: flatbuffers.Builder,
      value: number
    ): flatbuffers.Offset {
      builder.prep(4, 4);
      builder.writeFloat32(value);
      return builder.offset();
    }
  }
}
/**
 * @constructor
 */
export namespace WPFlatbuffers {
  export class UShort {
    bb: flatbuffers.ByteBuffer | null = null;

    bb_pos: number = 0;
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns UShort
     */
    __init(i: number, bb: flatbuffers.ByteBuffer): UShort {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    }

    /**
     * @returns number
     */
    value(): number {
      return this.bb!.readUint16(this.bb_pos);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param number value
     * @returns flatbuffers.Offset
     */
    static createUShort(
      builder: flatbuffers.Builder,
      value: number
    ): flatbuffers.Offset {
      builder.prep(2, 2);
      builder.writeInt16(value);
      return builder.offset();
    }
  }
}
/**
 * @constructor
 */
export namespace WPFlatbuffers {
  export class Update {
    bb: flatbuffers.ByteBuffer | null = null;

    bb_pos: number = 0;
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Update
     */
    __init(i: number, bb: flatbuffers.ByteBuffer): Update {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    }

    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Update= obj
     * @returns Update
     */
    static getRootAsUpdate(bb: flatbuffers.ByteBuffer, obj?: Update): Update {
      return (obj || new Update()).__init(
        bb.readInt32(bb.position()) + bb.position(),
        bb
      );
    }

    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Update= obj
     * @returns Update
     */
    static getSizePrefixedRootAsUpdate(
      bb: flatbuffers.ByteBuffer,
      obj?: Update
    ): Update {
      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Update()).__init(
        bb.readInt32(bb.position()) + bb.position(),
        bb
      );
    }

    /**
     * @param flatbuffers.Encoding= optionalEncoding
     * @returns string|Uint8Array|null
     */
    actorId(): string | null;
    actorId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    actorId(optionalEncoding?: any): string | Uint8Array | null {
      var offset = this.bb!.__offset(this.bb_pos, 4);
      return offset
        ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
        : null;
    }

    /**
     * @returns boolean
     */
    deleted(): boolean {
      var offset = this.bb!.__offset(this.bb_pos, 6);
      return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    /**
     * @param WPFlatbuffers.Float= obj
     * @returns WPFlatbuffers.Float|null
     */
    speed(obj?: WPFlatbuffers.Float): WPFlatbuffers.Float | null {
      var offset = this.bb!.__offset(this.bb_pos, 8);
      return offset
        ? (obj || new WPFlatbuffers.Float()).__init(
            this.bb_pos + offset,
            this.bb!
          )
        : null;
    }

    /**
     * @param WPFlatbuffers.UShort= obj
     * @returns WPFlatbuffers.UShort|null
     */
    color(obj?: WPFlatbuffers.UShort): WPFlatbuffers.UShort | null {
      var offset = this.bb!.__offset(this.bb_pos, 10);
      return offset
        ? (obj || new WPFlatbuffers.UShort()).__init(
            this.bb_pos + offset,
            this.bb!
          )
        : null;
    }

    /**
     * @param WPFlatbuffers.Vector3= obj
     * @returns WPFlatbuffers.Vector3|null
     */
    position(obj?: WPFlatbuffers.Vector3): WPFlatbuffers.Vector3 | null {
      var offset = this.bb!.__offset(this.bb_pos, 12);
      return offset
        ? (obj || new WPFlatbuffers.Vector3()).__init(
            this.bb_pos + offset,
            this.bb!
          )
        : null;
    }

    /**
     * @param WPFlatbuffers.Vector3= obj
     * @returns WPFlatbuffers.Vector3|null
     */
    rotation(obj?: WPFlatbuffers.Vector3): WPFlatbuffers.Vector3 | null {
      var offset = this.bb!.__offset(this.bb_pos, 14);
      return offset
        ? (obj || new WPFlatbuffers.Vector3()).__init(
            this.bb_pos + offset,
            this.bb!
          )
        : null;
    }

    /**
     * @param WPFlatbuffers.Vector3= obj
     * @returns WPFlatbuffers.Vector3|null
     */
    scale(obj?: WPFlatbuffers.Vector3): WPFlatbuffers.Vector3 | null {
      var offset = this.bb!.__offset(this.bb_pos, 16);
      return offset
        ? (obj || new WPFlatbuffers.Vector3()).__init(
            this.bb_pos + offset,
            this.bb!
          )
        : null;
    }

    /**
     * @param WPFlatbuffers.Vector3= obj
     * @returns WPFlatbuffers.Vector3|null
     */
    up(obj?: WPFlatbuffers.Vector3): WPFlatbuffers.Vector3 | null {
      var offset = this.bb!.__offset(this.bb_pos, 18);
      return offset
        ? (obj || new WPFlatbuffers.Vector3()).__init(
            this.bb_pos + offset,
            this.bb!
          )
        : null;
    }

    /**
     * @param flatbuffers.Builder builder
     */
    static startUpdate(builder: flatbuffers.Builder) {
      builder.startObject(8);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset actorIdOffset
     */
    static addActorId(
      builder: flatbuffers.Builder,
      actorIdOffset: flatbuffers.Offset
    ) {
      builder.addFieldOffset(0, actorIdOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param boolean deleted
     */
    static addDeleted(builder: flatbuffers.Builder, deleted: boolean) {
      builder.addFieldInt8(1, +deleted, +false);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset speedOffset
     */
    static addSpeed(
      builder: flatbuffers.Builder,
      speedOffset: flatbuffers.Offset
    ) {
      builder.addFieldStruct(2, speedOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset colorOffset
     */
    static addColor(
      builder: flatbuffers.Builder,
      colorOffset: flatbuffers.Offset
    ) {
      builder.addFieldStruct(3, colorOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset positionOffset
     */
    static addPosition(
      builder: flatbuffers.Builder,
      positionOffset: flatbuffers.Offset
    ) {
      builder.addFieldStruct(4, positionOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset rotationOffset
     */
    static addRotation(
      builder: flatbuffers.Builder,
      rotationOffset: flatbuffers.Offset
    ) {
      builder.addFieldStruct(5, rotationOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset scaleOffset
     */
    static addScale(
      builder: flatbuffers.Builder,
      scaleOffset: flatbuffers.Offset
    ) {
      builder.addFieldStruct(6, scaleOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset upOffset
     */
    static addUp(builder: flatbuffers.Builder, upOffset: flatbuffers.Offset) {
      builder.addFieldStruct(7, upOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    static endUpdate(builder: flatbuffers.Builder): flatbuffers.Offset {
      var offset = builder.endObject();
      return offset;
    }

    static createUpdate(
      builder: flatbuffers.Builder,
      actorIdOffset: flatbuffers.Offset,
      deleted: boolean,
      speedOffset: flatbuffers.Offset,
      colorOffset: flatbuffers.Offset,
      positionOffset: flatbuffers.Offset,
      rotationOffset: flatbuffers.Offset,
      scaleOffset: flatbuffers.Offset,
      upOffset: flatbuffers.Offset
    ): flatbuffers.Offset {
      Update.startUpdate(builder);
      Update.addActorId(builder, actorIdOffset);
      Update.addDeleted(builder, deleted);
      Update.addSpeed(builder, speedOffset);
      Update.addColor(builder, colorOffset);
      Update.addPosition(builder, positionOffset);
      Update.addRotation(builder, rotationOffset);
      Update.addScale(builder, scaleOffset);
      Update.addUp(builder, upOffset);
      return Update.endUpdate(builder);
    }
  }
}
/**
 * @constructor
 */
export namespace WPFlatbuffers {
  export class Diff {
    bb: flatbuffers.ByteBuffer | null = null;

    bb_pos: number = 0;
    /**
     * @param number i
     * @param flatbuffers.ByteBuffer bb
     * @returns Diff
     */
    __init(i: number, bb: flatbuffers.ByteBuffer): Diff {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    }

    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Diff= obj
     * @returns Diff
     */
    static getRootAsDiff(bb: flatbuffers.ByteBuffer, obj?: Diff): Diff {
      return (obj || new Diff()).__init(
        bb.readInt32(bb.position()) + bb.position(),
        bb
      );
    }

    /**
     * @param flatbuffers.ByteBuffer bb
     * @param Diff= obj
     * @returns Diff
     */
    static getSizePrefixedRootAsDiff(
      bb: flatbuffers.ByteBuffer,
      obj?: Diff
    ): Diff {
      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Diff()).__init(
        bb.readInt32(bb.position()) + bb.position(),
        bb
      );
    }

    /**
     * @param WPFlatbuffers.UShort= obj
     * @returns WPFlatbuffers.UShort|null
     */
    version(obj?: WPFlatbuffers.UShort): WPFlatbuffers.UShort | null {
      var offset = this.bb!.__offset(this.bb_pos, 4);
      return offset
        ? (obj || new WPFlatbuffers.UShort()).__init(
            this.bb_pos + offset,
            this.bb!
          )
        : null;
    }

    /**
     * @param number index
     * @param WPFlatbuffers.Update= obj
     * @returns WPFlatbuffers.Update
     */
    updates(
      index: number,
      obj?: WPFlatbuffers.Update
    ): WPFlatbuffers.Update | null {
      var offset = this.bb!.__offset(this.bb_pos, 6);
      return offset
        ? (obj || new WPFlatbuffers.Update()).__init(
            this.bb!.__indirect(
              this.bb!.__vector(this.bb_pos + offset) + index * 4
            ),
            this.bb!
          )
        : null;
    }

    /**
     * @returns number
     */
    updatesLength(): number {
      var offset = this.bb!.__offset(this.bb_pos, 6);
      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    /**
     * @param flatbuffers.Builder builder
     */
    static startDiff(builder: flatbuffers.Builder) {
      builder.startObject(2);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset versionOffset
     */
    static addVersion(
      builder: flatbuffers.Builder,
      versionOffset: flatbuffers.Offset
    ) {
      builder.addFieldStruct(0, versionOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset updatesOffset
     */
    static addUpdates(
      builder: flatbuffers.Builder,
      updatesOffset: flatbuffers.Offset
    ) {
      builder.addFieldOffset(1, updatesOffset, 0);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param Array.<flatbuffers.Offset> data
     * @returns flatbuffers.Offset
     */
    static createUpdatesVector(
      builder: flatbuffers.Builder,
      data: flatbuffers.Offset[]
    ): flatbuffers.Offset {
      builder.startVector(4, data.length, 4);
      for (var i = data.length - 1; i >= 0; i--) {
        builder.addOffset(data[i]);
      }
      return builder.endVector();
    }

    /**
     * @param flatbuffers.Builder builder
     * @param number numElems
     */
    static startUpdatesVector(builder: flatbuffers.Builder, numElems: number) {
      builder.startVector(4, numElems, 4);
    }

    /**
     * @param flatbuffers.Builder builder
     * @returns flatbuffers.Offset
     */
    static endDiff(builder: flatbuffers.Builder): flatbuffers.Offset {
      var offset = builder.endObject();
      return offset;
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    static finishDiffBuffer(
      builder: flatbuffers.Builder,
      offset: flatbuffers.Offset
    ) {
      builder.finish(offset);
    }

    /**
     * @param flatbuffers.Builder builder
     * @param flatbuffers.Offset offset
     */
    static finishSizePrefixedDiffBuffer(
      builder: flatbuffers.Builder,
      offset: flatbuffers.Offset
    ) {
      builder.finish(offset, undefined, true);
    }

    static createDiff(
      builder: flatbuffers.Builder,
      versionOffset: flatbuffers.Offset,
      updatesOffset: flatbuffers.Offset
    ): flatbuffers.Offset {
      Diff.startDiff(builder);
      Diff.addVersion(builder, versionOffset);
      Diff.addUpdates(builder, updatesOffset);
      return Diff.endDiff(builder);
    }
  }
}
